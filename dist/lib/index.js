var e={966:e=>{e.exports="uniform sampler2D map;\n\nvarying vec2 uv_out;\n\nvoid main(){\n  vec3 color = texture2D(map, uv_out).rgb;\n  gl_FragColor = vec4(color, 1.0);\n}\n\n"},743:e=>{e.exports="varying vec2 uv_out;\nvarying vec3 pos_out;\nvarying vec3 normal_out;\n\nvoid main(){\n  uv_out = uv;\n  pos_out = (modelMatrix * vec4(position, 1.0)).xyz;\n  normal_out = (modelMatrix * vec4(normal, 0.0)).xyz;\n  gl_Position = projectionMatrix*modelViewMatrix*vec4(position, 1.0);\n}\n\n"},677:e=>{e.exports="uniform sampler2D map;\nuniform sampler2D index_map;\nuniform int picked_index;\n\nvarying vec2 uv_out;\n\n#include <common>\nvec3 toneMap(vec3 hdrColor) {\n  return hdrColor/(hdrColor + vec3(1.0));\n}\n\nvec3 untoneMap(vec3 ldrColor) {\n  return ldrColor/(vec3(1.0) - ldrColor);\n}\n// vec3 toneMap(vec3 hdrColor) {\n  // // ACES APPROXIMATION from https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n  // hdrColor *= 0.6;\n  // float a = 2.51;\n  // float b = 0.03;\n  // float c = 2.43;\n  // float d = 0.59;\n  // float e = 0.14;\n  // hdrColor = clamp((hdrColor*(a*hdrColor+b))/(hdrColor*(c*hdrColor+d)+e), 0.0, 1.0);\n\n  // return hdrColor;\n// }\n\n// vec3 untoneMap(vec3 hdrColor) {\n  // // ACES INVERSE APPROXIMATION from https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n  // // See https://www.symbolab.com/solver/function-inverse-calculator/inverse%20f%5Cleft(x%5Cright)%3D%5Cfrac%7B%5Cleft(2.51%5Ccdot%20x%5E%7B2%7D%20%2B%200.03%5Ccdot%20x%5Cright)%7D%7B2.43%5Ccdot%20x%5E%7B2%7D%20%2B0.59%5Ccdot%20x%20%2B%200.14%7D\n  // float a = -0.59;\n  // float b = 0.03;\n  // float c = -1.0127;\n  // float d = 1.3702;\n  // float e = 0.0009;\n  // float f = 2.43;\n  // float g = 2.51;\n  // hdrColor = (a*hdrColor + b - sqrt(c*hdrColor*hdrColor + d*hdrColor + e))/(2.0*(f*hdrColor - g));\n  // hdrColor /= 0.6;\n\n  // return hdrColor;\n// }\n\nvoid main(){\n  vec4 color = texture2D(map, uv_out);\n  color.xyz = pow(color.xyz, vec3(2.2));\n  color.xyz = untoneMap(color.xyz);\n\n  vec4 index_color = texture2D(index_map, uv_out);\n\n  if (int(index_color*255.0) == picked_index) {\n    gl_FragColor = vec4(2.0, 2.0, 2.0, 1.0);\n  } else {\n    gl_FragColor = color;\n  }\n\n  gl_FragColor.xyz = toneMap(gl_FragColor.xyz);\n  gl_FragColor.xyz = pow(gl_FragColor.xyz, vec3(1.0/2.2));\n}\n"},504:e=>{e.exports="varying vec2 uv_out;\n\nvoid main(){\n  uv_out = uv;\n  gl_Position = vec4(position.xy, 0.0, 1.0);\n}\n\n"}},t={};function A(r){var n=t[r];if(void 0!==n)return n.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,A),a.exports}A.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return A.d(t,{a:t}),t},A.d=(e,t)=>{for(var r in t)A.o(t,r)&&!A.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},A.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),A.p="http://localhost:8082/https://app.pierrelespingal.xyz/earth/v2.0.6";var r={};(()=>{A.d(r,{Z:()=>d});const e=VIEWER,t=A.p+"assets/a5ab715f9d4037627106..png",n=A.p+"assets/1bce1c1e717acb077134..png",a=A.p+"assets/335643fc2728d4717e77..png";var i=A(677),o=A.n(i),E=A(504),s=A.n(E),N=A(966),I=A.n(N),R=A(743),S=A.n(R);const T={AF:"AFGHANISTAN",AX:"ÅLAND ISLANDS",AL:"ALBANIA",DZ:"ALGERIA",AS:"AMERICAN SAMOA",AD:"ANDORRA",AO:"ANGOLA",AI:"ANGUILLA",AQ:"ANTARCTICA",AG:"ANTIGUA AND BARBUDA",AR:"ARGENTINA",AM:"ARMENIA",AW:"ARUBA",AU:"AUSTRALIA",AT:"AUSTRIA",AZ:"AZERBAIJAN",BS:"BAHAMAS",BH:"BAHRAIN",BD:"BANGLADESH",BB:"BARBADOS",BY:"BELARUS",BE:"BELGIUM",BZ:"BELIZE",BJ:"BENIN",BM:"BERMUDA",BT:"BHUTAN",BO:"BOLIVIA, PLURINATIONAL STATE OF",BQ:"BONAIRE, SINT EUSTATIUS AND SABA",BA:"BOSNIA",BW:"BOTSWANA",BV:"BOUVET ISLAND",BR:"BRAZIL",IO:"BRITISH INDIAN OCEAN TERRITORY",BN:"BRUNEI DARUSSALAM",BG:"BULGARIA",BF:"BURKINA FASO",BI:"BURUNDI",KH:"CAMBODIA",CM:"CAMEROON",CA:"CANADA",CV:"CAPE VERDE",KY:"CAYMAN ISLANDS",CF:"CENTRAL AFRICAN REPUBLIC",TD:"CHAD",CL:"CHILE",CN:"CHINA",CX:"CHRISTMAS ISLAND",CC:"COCOS (KEELING) ISLANDS",CO:"COLOMBIA",KM:"COMOROS",CG:"CONGO",CD:"CONGO, THE DEMOCRATIC REPUBLIC OF THE",CK:"COOK ISLANDS",CR:"COSTA RICA",CI:"CÔTE D'IVOIRE",HR:"CROATIA",CU:"CUBA",CW:"CURAÇAO",CY:"CYPRUS",CZ:"CZECHIA",DK:"DENMARK",DJ:"DJIBOUTI",DM:"DOMINICA",DO:"DOMINICAN REPUBLIC",EC:"ECUADOR",EG:"EGYPT",SV:"EL SALVADOR",GQ:"EQUATORIAL GUINEA",ER:"ERITREA",EE:"ESTONIA",ET:"ETHIOPIA",FK:"FALKLAND ISLANDS (MALVINAS)",FO:"FAROE ISLANDS",FJ:"FIJI",FI:"FINLAND",FR:"FRANCE",GF:"FRENCH GUIANA",PF:"FRENCH POLYNESIA",TF:"FRENCH SOUTHERN TERRITORIES",GA:"GABON",GM:"GAMBIA",GE:"GEORGIA",DE:"GERMANY",GH:"GHANA",GI:"GIBRALTAR",GR:"GREECE",GL:"GREENLAND",GD:"GRENADA",GP:"GUADELOUPE",GU:"GUAM",GT:"GUATEMALA",GG:"GUERNSEY",GN:"GUINEA",GW:"GUINEA-BISSAU",GY:"GUYANA",HT:"HAITI",HM:"HEARD ISLAND AND MCDONALD ISLANDS",VA:"HOLY SEE (VATICAN CITY STATE)",HN:"HONDURAS",HK:"HONG KONG",HU:"HUNGARY",IS:"ICELAND",IN:"INDIA",ID:"INDONESIA",IR:"IRAN, ISLAMIC REPUBLIC OF",IQ:"IRAQ",IE:"IRELAND",IM:"ISLE OF MAN",IL:"ISRAEL",IT:"ITALY",JM:"JAMAICA",JP:"JAPAN",JE:"JERSEY",JO:"JORDAN",KZ:"KAZAKHSTAN",KE:"KENYA",KI:"KIRIBATI",KP:"KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF",KR:"KOREA, REPUBLIC OF",KW:"KUWAIT",KG:"KYRGYZSTAN",LA:"LAO PEOPLE'S DEMOCRATIC REPUBLIC",LV:"LATVIA",LB:"LEBANON",LS:"LESOTHO",LR:"LIBERIA",LY:"LIBYA",LI:"LIECHTENSTEIN",LT:"LITHUANIA",LU:"LUXEMBOURG",MO:"MACAO",MK:"MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF",MG:"MADAGASCAR",MW:"MALAWI",MY:"MALAYSIA",MV:"MALDIVES",ML:"MALI",MT:"MALTA",MH:"MARSHALL ISLANDS",MQ:"MARTINIQUE",MR:"MAURITANIA",MU:"MAURITIUS",YT:"MAYOTTE",MX:"MEXICO",FM:"MICRONESIA, FEDERATED STATES OF",MD:"MOLDOVA, REPUBLIC OF",MC:"MONACO",MN:"MONGOLIA",ME:"MONTENEGRO",MS:"MONTSERRAT",MA:"MOROCCO",MZ:"MOZAMBIQUE",MM:"MYANMAR",NA:"NAMIBIA",NR:"NAURU",NP:"NEPAL",NL:"NETHERLANDS",NC:"NEW CALEDONIA",NZ:"NEW ZEALAND",NI:"NICARAGUA",NE:"NIGER",NG:"NIGERIA",NU:"NIUE",NF:"NORFOLK ISLAND",MP:"NORTHERN MARIANA ISLANDS",NO:"NORWAY",OM:"OMAN",PK:"PAKISTAN",PW:"PALAU",PS:"PALESTINIAN TERRITORY, OCCUPIED",PA:"PANAMA",PG:"PAPUA NEW GUINEA",PY:"PARAGUAY",PE:"PERU",PH:"PHILIPPINES",PN:"PITCAIRN",PL:"POLAND",PT:"PORTUGAL",PR:"PUERTO RICO",QA:"QATAR",RE:"RÉUNION",RO:"ROMANIA",RU:"RUSSIAN FEDERATION",RW:"RWANDA",BL:"SAINT BARTHÉLEMY",SH:"SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA",KN:"SAINT KITTS AND NEVIS",LC:"SAINT LUCIA",MF:"SAINT MARTIN (FRENCH PART)",PM:"SAINT PIERRE AND MIQUELON",VC:"SAINT VINCENT AND THE GRENADINES",WS:"SAMOA",SM:"SAN MARINO",ST:"SAO TOME AND PRINCIPE",SA:"SAUDI ARABIA",SN:"SENEGAL",RS:"SERBIA",SC:"SEYCHELLES",SL:"SIERRA LEONE",SG:"SINGAPORE",SX:"SINT MAARTEN (DUTCH PART)",SK:"SLOVAKIA",SI:"SLOVENIA",SB:"SOLOMON ISLANDS",SO:"SOMALIA",ZA:"SOUTH AFRICA",GS:"SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS",SS:"SOUTH SUDAN",ES:"SPAIN",LK:"SRI LANKA",SD:"SUDAN",SR:"SURINAME",SJ:"SVALBARD AND JAN MAYEN",SZ:"SWAZILAND",SE:"SWEDEN",CH:"SWITZERLAND",SY:"SYRIAN ARAB REPUBLIC",TW:"TAIWAN",TJ:"TAJIKISTAN",TZ:"TANZANIA, UNITED REPUBLIC OF",TH:"THAILAND",TL:"TIMOR-LESTE",TG:"TOGO",TK:"TOKELAU",TO:"TONGA",TT:"TRINIDAD AND TOBAGO",TN:"TUNISIA",TR:"TURKEY",TM:"TURKMENISTAN",TC:"TURKS AND CAICOS ISLANDS",TV:"TUVALU",UG:"UGANDA",UA:"UKRAINE",AE:"UNITED ARAB EMIRATES",GB:"UNITED KINGDOM",US:"USA",UM:"UNITED STATES MINOR OUTLYING ISLANDS",UY:"URUGUAY",UZ:"UZBEKISTAN",VU:"VANUATU",VE:"VENEZUELA, BOLIVARIAN REPUBLIC OF",VN:"VIETNAM",VG:"VIRGIN ISLANDS, BRITISH",VI:"VIRGIN ISLANDS, U.S.",WF:"WALLIS AND FUTUNA",EH:"WESTERN SAHARA",YE:"YEMEN",ZM:"ZAMBIA",ZW:"ZIMBABWE"},L={PE:1,BF:2,FR:3,LY:4,BY:5,PK:6,ID:7,YE:8,MG:9,BO:10,CI:11,DZ:12,CH:13,CM:14,MK:15,BW:16,UA:17,KE:18,TW:19,JO:20,MX:21,AE:22,BZ:23,BR:24,SL:25,ML:26,CD:27,IT:28,SO:29,AF:30,BD:31,DO:32,GW:33,GH:34,AT:35,SE:36,TR:37,UG:38,MZ:39,JP:40,NZ:41,CU:42,VE:43,PT:44,CO:45,MR:46,AO:47,DE:48,SD:49,TH:50,AU:51,PG:52,IQ:53,HR:54,GL:55,NE:56,DK:57,LV:58,RO:59,ZM:60,IR:61,MM:62,ET:63,GT:64,SR:65,EH:66,CZ:67,TD:68,AL:69,FI:70,SY:71,KG:72,SB:73,OM:74,PA:75,AR:76,GB:77,CR:78,PY:79,GN:80,IE:81,NG:82,TN:83,PL:84,NA:85,ZA:86,EG:87,TZ:88,GE:89,SA:90,VN:91,RU:92,HT:93,BA:94,IN:95,CN:96,CA:97,SV:98,GY:99,BE:100,GQ:101,LS:102,BG:103,BI:104,DJ:105,AZ:106,MY:107,PH:108,UY:109,CG:110,RS:111,ME:112,EE:113,RW:114,AM:115,SN:116,TG:117,ES:118,GA:119,HU:120,MW:121,TJ:122,KH:123,KR:124,HN:125,IS:126,NI:127,CL:128,MA:129,LR:130,NL:131,CF:132,SK:133,LT:134,ZW:135,LK:136,IL:137,LA:138,KP:139,GR:140,TM:141,EC:142,BJ:143,SI:144,NO:145,MD:146,LB:147,NP:148,ER:149,US:150,KZ:151,AQ:152,SZ:153,UZ:154,MN:155,BT:156,NC:157,FJ:158,KW:159,TL:160,BS:161,VU:162,FK:163,GM:164,QA:165,JM:166,CY:167,PR:168,PS:169,BN:170,TT:171,CV:172,PF:173,WS:174,LU:175,KM:176,MU:177,FO:178,ST:179,AN:180,DM:181,TO:182,KI:183,FM:184,BH:185,AD:186,MP:187,PW:188,SC:189,AG:190,BB:191,TC:192,VC:193,LC:194,YT:195,VI:196,GD:197,MT:198,MV:199,KY:200,KN:201,MS:202,BL:203,NU:204,PM:205,CK:206,WF:207,AS:208,MH:209,AW:210,LI:211,VG:212,SH:213,JE:214,AI:215,MF_1_:216,GG:217,SM:218,BM:219,TV:220,NR:221,GI:222,PN:223,MC:224,VA:225,IM:226,GU:227,SG:228};class l extends e.THREE.EventDispatcher{textureLoader=new e.THREE.TextureLoader;savedTime=(new Date).getTime();index_map=null;earth_map=null;pbr_map=null;publicViewer;viewer;domElement;countryName="";width=0;height=0;mousemoveEventListener=()=>{};resizeEventListener=()=>{};updatePreprocessesEventListener=()=>{};constructor(e){super(),this.publicViewer=e,this.viewer=this.publicViewer.viewer,this.domElement=this.viewer.element}addEventListeners=(e,t,A)=>{this.updatePreprocessesEventListener=({camera:r,renderer:n})=>{this.render(r,n,e,t,A)},this.mousemoveEventListener=t=>this.mousemove(t,e,A),this.resizeEventListener=()=>this.resize(e,t),this.domElement.addEventListener("mousemove",this.mousemoveEventListener,!1),window.addEventListener("resize",this.resizeEventListener,!1),this.viewer.addEventListener("updatePreprocesses",this.updatePreprocessesEventListener)};async start(){let t=this.viewer.getScene("earth-detector"),A=this.viewer.getScene("earth-main"),r=this.viewer.getScene("earth-final");if(this.viewer.camera.position.set(2,0,0),this.viewer.fov=50,this.viewer.camera.fov=50,function(e){const{controls:t}=e;t.enablePan=!1,t.rotateSpeed=.2,t.minDistance=2.5,t.maxDistance=2.5,t.maxPolarAngle=3.1,t.enableDamping=!0,t.dampingFactor=.1}(this.viewer),!t||!A||!r){t=function(t,A,r){const n={map:new e.THREE.Uniform(null)},a=new e.THREE.ShaderMaterial({uniforms:n,vertexShader:S(),fragmentShader:I()}),i=new e.THREE.SphereGeometry(1,32,32),o=new e.THREE.Mesh(i,a);o.name="detector";const E=t.createScene("earth-detector");E.add(o);const s=new t.context.WebGLRenderTarget(A,r);return E.userData.renderTarget=s,E}(this.viewer,this.domElement.offsetWidth,this.domElement.offsetHeight),A=function(t,A,r){const n=t.createScene("earth-main"),a=function(t){const A=new e.THREE.SphereGeometry(1,64,64),r=t.createMaterial();r.color=new e.THREE.Color(1,1,1),r.roughness=1,r.metalness=1;const n=new e.THREE.Mesh(A,r);return n.name="earth",n}(n),i=new e.THREE.AmbientLight;n.add(i),n.add(a);const o=new e.THREE.WebGLRenderTarget(A,r,{minFilter:e.THREE.NearestFilter,magFilter:e.THREE.NearestFilter,format:e.THREE.RGBAFormat});return n.userData.renderTarget=o,n}(this.viewer,this.domElement.offsetWidth,this.domElement.offsetHeight),r=function(t){const A=t.createScene("earth-final"),r=new e.THREE.PlaneGeometry(2,2),n=new e.THREE.ShaderMaterial({uniforms:{map:{type:"t",value:null},index_map:{type:"t",value:null},picked_index:{type:"i",value:666}},vertexShader:s(),fragmentShader:o()}),a=new e.THREE.Mesh(r,n);return a.name="final",A.add(a),A}(this.viewer),this.publicViewer.addTasks(this.getTasks()),await this.publicViewer.launchTasks(),t.getObjectByName("detector").material.uniforms.map.value=this.index_map;const n=A.getObjectByName("earth");n.material.map=this.earth_map,n.material.roughnessMap=this.pbr_map,n.material.metalnessMap=this.pbr_map,r.getObjectByName("final").material.uniforms.index_map.value=t.userData.renderTarget.texture}this.viewer.setScene(r),this.addEventListeners(t,A,r),this.resize(t,A)}stop(){this.domElement.removeEventListener("mousemove",this.mousemoveEventListener,!1),window.removeEventListener("resize",this.resizeEventListener,!1),this.viewer.removeEventListener("updatePreprocesses",this.updatePreprocessesEventListener)}getTasks(){return{parallelTasks:[{task:async()=>{this.index_map=await this.textureLoader.loadAsync(n),this.index_map.magFilter=e.THREE.NearestFilter,this.index_map.minFilter=e.THREE.NearestFilter}},{task:async()=>{this.earth_map=await this.textureLoader.loadAsync(t)}},{task:async()=>{this.pbr_map=await this.textureLoader.loadAsync(a)}}]}}mousemove(e,t,A){var r=(new Date).getTime();if(r-this.savedTime<20)return;var n=e.clientX-this.domElement.getBoundingClientRect().left,a=e.clientY-this.domElement.getBoundingClientRect().top,i=function(e,t,A,r){const n=new Uint8Array(4);return e.readRenderTargetPixels(t,A,e.domElement.height-r,1,1,n),n[0]||-1}(this.viewer.renderer,t.userData.renderTarget,n,a);A.getObjectByName("final").material.uniforms.picked_index.value=i,this.savedTime=r;const o=this.getCountryName(i);o!=this.countryName&&(this.countryName=o,this.dispatchEvent({type:"country",message:this.countryName}))}getCountryName(e){for(var t in L)if(L.hasOwnProperty(t)&&e==L[t])return T[t];return""}render(e,t,A,r,n){t.setRenderTarget(A.userData.renderTarget),t.render(A,e),t.setRenderTarget(r.userData.renderTarget),t.render(r,e),n.getObjectByName("final").material.uniforms.map.value=r.userData.renderTarget.texture,t.setRenderTarget(null)}resize(e,t){this.width=this.domElement.offsetWidth,this.height=this.domElement.offsetHeight,e.userData.renderTarget.setSize(this.width,this.height),t.userData.renderTarget.setSize(this.width,this.height)}dispose(){this.stop(),this.index_map&&this.index_map.dispose(),this.earth_map&&this.earth_map.dispose(),this.pbr_map&&this.pbr_map.dispose();const e=this.viewer.getScene("earth-final");if(e){const t=e.getObjectByName("final");t.geometry.dispose(),t.material.dispose()}const t=this.viewer.getScene("earth-main");if(t){t.userData.renderTarget.dispose();const e=t.getObjectByName("earth");e.geometry.dispose(),e.material.dispose()}const A=this.viewer.getScene("earth-detector");if(A){A.userData.renderTarget.dispose();const e=A.getObjectByName("detector");e.geometry.dispose(),e.material.dispose()}this.publicViewer.dispose()}}const d=l})();var n=r.Z;export{n as default};